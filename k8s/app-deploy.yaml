apiVersion: apps/v1  # API 버전 지정 (apps/v1)
kind: Deployment  # 리소스 종류 지정 (Deployment)
metadata:
  name: front-app  # Deployment 이름 지정
  namespace: eof  # 네임스페이스 지정
spec:
  replicas: 2  # 생성할 파드의 복제본 수 지정
  selector:
    matchLabels:
      app: front  # 라벨 선택 (이 라벨을 가진 파드를 선택)
  template:
    metadata:
      labels:
        app: front  # 파드에 할당할 라벨 지정
    spec:
      containers:
        - name: front  # 컨테이너 이름 지정
          image: oncliff/eof-final:front-app_1.0.10  # 사용할 컨테이너 이미지 지정  # shvic/projectf:dockerfile
          ports:
            - containerPort: 3000  # 프론트엔드 컨테이너에서 수신할 포트 번호
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"

          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 3000
          #   initialDelaySeconds: 3
          #   periodSeconds: 30
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: 3000
          #   initialDelaySeconds: 3
          #   periodSeconds: 30
          # env:
          #   - name: BACK_APP_SERVICE_HOST
          #     value: "back-service"  # back-app 서비스의 이름을 환경 변수로 전달
          #   - name: BACK_APP_SERVICE_PORT
          #     value: "8000"  # back-app 서비스의 포트를 환경 변수로 전달

---
apiVersion: apps/v1  # API 버전 지정 (apps/v1)
kind: Deployment  # 리소스 종류 지정 (Deployment)
metadata:
  name: back-app  # Deployment 이름 지정
  namespace: eof  # 네임스페이스 지정
spec:
  replicas: 2  # 생성할 파드의 복제본 수 지정
  selector:
    matchLabels:
      app: back  # 라벨 선택 (이 라벨을 가진 파드를 선택)
  template:
    metadata:
      labels:
        app: back  # 파드에 할당할 라벨 지정
    spec:
      containers:
        - name: back  # 컨테이너 이름 지정
          image: oncliff/eof-final:back-app_1.0.10 # 사용할 컨테이너 이미지 지정
          ports:
            - containerPort: 8000  # 백엔드 컨테이너에서 수신할 포트 번호
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 8000
          #   initialDelaySeconds: 3
          #   periodSeconds: 30
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: 8000
          #   initialDelaySeconds: 3
          #   periodSeconds: 30

---
apiVersion: v1  # API 버전 지정 (v1)
kind: Service  # 리소스 종류 지정 (Service)
metadata:
  name: front-service  # Service 이름 지정
  namespace: eof  # 네임스페이스 지정
spec:
  selector:
    app: front  # 이 라벨을 가진 파드를 선택
  ports:
    - protocol: TCP  # 사용할 프로토콜 지정 (TCP)
      port: 80  # 클러스터 외부에서 접근할 포트 (서비스가 노출할 포트)
      targetPort: 3000  # 프론트엔드 컨테이너의 포트 (타겟 포트)

---
apiVersion: v1  # API 버전 지정 (v1)
kind: Service  # 리소스 종류 지정 (Service)
metadata:
  name: back-service  # Service 이름 지정
  namespace: eof  # 네임스페이스 지정
spec:
  selector:
    app: back  # 이 라벨을 가진 파드를 선택
  ports:
    - protocol: TCP  # 사용할 프로토콜 지정 (TCP)
      port: 80  # 클러스터 외부에서 접근할 포트 (서비스가 노출할 포트)
      targetPort: 8000  # 백엔드 컨테이너의 포트 (타겟 포트)
